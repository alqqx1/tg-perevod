import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from googletrans import Translator
from gtts import gTTS

API_TOKEN = '-'  # Замените на ваш токен
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# Список популярных языков с кодами и названиями
LANGUAGES = {
    'en': 'Английский',
    'es': 'Испанский',
    'fr': 'Французский',
    'de': 'Немецкий',
    'it': 'Итальянский',
    'pt': 'Португальский',
    'ru': 'Русский',
    'zh-cn': 'Китайский',
    'ja': 'Японский',
    'ar': 'Арабский',
    'lt': 'Литовский'
}

# Клавиатура для выбора языка
def get_lang_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton(text=name, callback_data=code) 
        for code, name in LANGUAGES.items()
    ]
    keyboard.add(*buttons)
    return keyboard

# Обработчик команды /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply(
        "Привет! Я бот для перевода и озвучивания текста.\n"
        "Отправь мне текст, и я помогу перевести его на другой язык или озвучить.",
        reply_markup=get_lang_keyboard()
    )

# Обработчик текстовых сообщений
@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_text(message: types.Message):
    await message.reply(
        "Выберите язык для перевода или озвучивания:",
        reply_markup=get_lang_keyboard()
    )

# Обработчик выбора языка
@dp.callback_query_handler(lambda c: c.data in LANGUAGES.keys())
async def process_language(callback_query: types.CallbackQuery):
    lang_code = callback_query.data
    lang_name = LANGUAGES[lang_code]
    
    # Получаем текст из сообщения, на которое ответили
    reply_to_message = callback_query.message.reply_to_message
    if not reply_to_message or not reply_to_message.text:
        await bot.answer_callback_query(callback_query.id, "Нет текста для перевода!")
        return
    
    text = reply_to_message.text
    
    # Переводим текст
    translator = Translator()
    try:
        translated = translator.translate(text, dest=lang_code)
        await bot.send_message(
            callback_query.from_user.id,
            f"Перевод на {lang_name}:\n{translated.text}"
        )
        
        # Создаем аудио и отправляем
        tts = gTTS(text=translated.text, lang=lang_code)
        audio_path = f"audio_{callback_query.from_user.id}.mp3"
        tts.save(audio_path)
        
        with open(audio_path, 'rb') as audio:
            await bot.send_voice(
                callback_query.from_user.id,
                audio,
                caption=f"Озвучка на {lang_name}"
            )
        
        os.remove(audio_path)  # Удаляем временный файл
        
    except Exception as e:
        await bot.send_message(
            callback_query.from_user.id,
            f"Ошибка: {str(e)}"
        )
    
    await bot.answer_callback_query(callback_query.id)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
